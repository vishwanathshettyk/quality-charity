private static Properties properties;
    private static final String CLIENT_SSL_ENABLED = "client.ssl.enabled";
    private static final String CLIENT_SSL_KEYSTORE_KEY = "client.ssl.keystore.password";
    private static final String CLIENT_SSL_SECRETKEY_PARTTWO = "client.ssl.secretKey.partTwo";
    private static final String CLIENT_SSL_KEYSTORE_TYPE = "client.ssl.keystore.type";
    private static final String CLIENT_SSL_KEYSTORE_PATH = "client.ssl.keystore.path";
    private static final String CLIENT_SSL_TRUSTSTORE_KEY = "client.ssl.truststore.password";
    private static final String CLIENT_SSL_TRUSTSTORE_PATH = "client.ssl.truststore.path";
    private static SSLConfig config;

    public static SSLConfig getConfiguration() {
        logger.info("called method getConfiguration");
        if (config == null) {
            logger.info("Properties value {}", properties);

            try {
                if (properties.getProperty("client.ssl.enabled") == null) {
                    loadLocalSecurityProperties();
                    logger.info("load internal Properties");
                }

                logger.info("configuration condition {}", StringUtils.isNotBlank(properties.getProperty("client.ssl.enabled")) && properties.getProperty("client.ssl.enabled").trim().equalsIgnoreCase("true"));
                if (StringUtils.isNotBlank(properties.getProperty("client.ssl.enabled")) && properties.getProperty("client.ssl.enabled").trim().equalsIgnoreCase("true")) {
                    String cryptedPassword = properties.getProperty("client.ssl.keystore.password");
                    String cryptedPasswordTrustStore = properties.getProperty("client.ssl.truststore.password");
                    String plainPassword = AesCrypter.decodeAndDecryptWithPrependedIV(cryptedPassword, String.format("%s%s", "0aDVq)4zzOc:39:D", properties.getProperty("client.ssl.secretKey.partTwo")).getBytes(), true);
                    String plainPasswordTrustStore = AesCrypter.decodeAndDecryptWithPrependedIV(cryptedPasswordTrustStore, String.format("%s%s", "0aDVq)4zzOc:39:D", properties.getProperty("client.ssl.secretKey.partTwo")).getBytes(), true);
                    KeyStore keyStore = KeyStore.getInstance(properties.getProperty("client.ssl.keystore.type"));
                    KeyStore trustStore = KeyStore.getInstance(properties.getProperty("client.ssl.keystore.type"));
                    File keystoreFile = new File(properties.getProperty("client.ssl.keystore.path"));
                    File trustStoreFile = new File(properties.getProperty("client.ssl.truststore.path"));
                    if (keystoreFile.exists() && trustStoreFile.exists()) {
                        loadCertificate(keyStore, trustStore, keystoreFile, trustStoreFile, plainPassword, plainPasswordTrustStore);
                        logger.info("path external keystorefile {}", keystoreFile.getPath());
                        logger.info("path external truststorefile {}", trustStoreFile.getPath());
                    } else {
                        keyStore.load(RunCucumber.class.getResourceAsStream(properties.getProperty("client.ssl.keystore.path")), plainPassword.toCharArray());
                        trustStore.load(RunCucumber.class.getResourceAsStream(properties.getProperty("client.ssl.truststore.path")), plainPasswordTrustStore.toCharArray());
                    }

                    config = (new SSLConfig()).with().trustStore(trustStoreFile, plainPasswordTrustStore).keyStore(keystoreFile, plainPassword).and().allowAllHostnames();
                }
            } catch (Exception var8) {
                logger.info("Error while loading keystore {}", var8.getMessage());
            }
        }

        return config;
    }

    private static void loadCertificate(KeyStore keyStore, KeyStore trustStore, File keystoreFile, File trustStoreFile, String plainPassword, String plainPasswordTrustStore) throws NoSuchAlgorithmException, CertificateException {
        try {
            FileInputStream keystoreStream = new FileInputStream(keystoreFile);
            Throwable var7 = null;

            try {
                FileInputStream truststoreStream = new FileInputStream(trustStoreFile);
                Throwable var9 = null;

                try {
                    keyStore.load(keystoreStream, plainPassword.toCharArray());
                    trustStore.load(truststoreStream, plainPasswordTrustStore.toCharArray());
                } catch (Throwable var34) {
                    var9 = var34;
                    throw var34;
                } finally {
                    if (truststoreStream != null) {
                        if (var9 != null) {
                            try {
                                truststoreStream.close();
                            } catch (Throwable var33) {
                                var9.addSuppressed(var33);
                            }
                        } else {
                            truststoreStream.close();
                        }
                    }

                }
            } catch (Throwable var36) {
                var7 = var36;
                throw var36;
            } finally {
                if (keystoreStream != null) {
                    if (var7 != null) {
                        try {
                            keystoreStream.close();
                        } catch (Throwable var32) {
                            var7.addSuppressed(var32);
                        }
                    } else {
                        keystoreStream.close();
                    }
                }

            }
        } catch (IOException var38) {
            logger.error("Error loading external keystore/truststore");
        }

    }

    private static void loadLocalSecurityProperties() throws IOException {
        properties.load(RunCucumber.class.getResourceAsStream("/Security.properties"));
    }

    public static RequestSpecification givenSecure() {
        logger.info("called givenSecure");
        RequestSpecification requestSpecification = RestAssured.given();
        if (getConfiguration() != null) {
            requestSpecification = requestSpecification.config(RestAssured.config().sslConfig(getConfiguration()));
            requestSpecification = givenAuth(requestSpecification);
            requestSpecification = givenProxy(requestSpecification);
        }

        return requestSpecification;
    }

    private static RequestSpecification givenProxy(RequestSpecification requestSpecification) {
        return StringUtils.isNotBlank(properties.getProperty("client.proxy.enabled")) && properties.getProperty("client.proxy.enabled").trim().equalsIgnoreCase("true") ? requestSpecification.proxy(ProxySpecification.host(properties.getProperty("client.proxy.url")).withPort(Integer.parseInt(properties.getProperty("client.proxy.port")))) : requestSpecification;
    }

    private static RequestSpecification givenAuth(RequestSpecification requestSpecification) {
        return StringUtils.isNotBlank(properties.getProperty("client.auth.enabled")) && properties.getProperty("client.auth.enabled").trim().equalsIgnoreCase("true") ? requestSpecification.auth().basic(properties.getProperty("client.auth.username"), properties.getProperty("client.auth.password")) : requestSpecification;
    }
